{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to DCC++ EX An open-source hardware and software platform for the operation of DCC-equipped model railroads. Welcome to the DCC++ EX website. DCC++ EX is an open-source hardware and software platform for the operation of DCC-equipped model railroads. It is based on Gregg E. Berman's DCC++ code. DCC-EX picks up where the original DCC++ left off. By addressing some previous issues, we have released what we now call \"DCC++ Classic\" - everything you enjoyed in the original version in a stable release. In addition, we have have continued development with an all new version called \"DCC-EX\" that includes enhancements and upgrades. We intend to organize this all in one place so that development can continue and the platform can adjust to new hardware and technnology. Our Mission Our mission is to supply the model railroading community with an Arduino based open source alternative to commercial DCC systems - one that is simple, affordable, expandable, and allows for a great out of box experience to control model trains and accessories. Further, it is our goal that this project be organized, documented, and maintained so that it can continue far into the future. What is DCC++ EX? In addition to controlling your trains, DCC++ also includes advanced features such as dedicated logic for operating turnouts, and the ability to create and control your own digital inputs, digital outputs, and even analog inputs --- great for reading panel switches, sensors, and occupancy detectors, as well as controlling servos, LEDS, and anything else you can imagine! Basically, DCC-EX can control anything using a DCC signal over two tracks, two wires, or via wired Ethernet or WiFi. DCC++ supports the full set of NMRA Digital Command and Control (DCC) standards , including: simultaneous control of multiple locomotives 2-byte and 4-byte locomotive addressing 128-step speed throttling Activate/de-activate all accessory function addresses 0-2048 Control of all cab functions F0-F28 Main Track: Write configuration variable bytes and set/clear specific configuration variable (CV) bits Programming Track: Same as the main track with the addition of reading configuration variable bytes What's new since DCC++ Classic? Direct support for all the most popular motor control boards I2C Display support Improved short circuit detection and automatic reset from an overload Current reading, sensing and ACK detection settings in milliAmps instead of just pin readings Improved adherence to the NMRA DCC specification New Communication Manager to handle input and output to multiple sources simultaneously (JMRI, Cab controllers, etc.) Arduino Network Shield and ESP8266 WiFi support Railcom Cutout (Beta) The code is now simpler, modular, faster and provides an API Library for developers and easy expansion No more jumpers or soldering! (Beta) The system consists of multiple parts: Base Station - An Arduino, motorboard and the DCC-EX uploadable firmware Controller - The JMRI Train Controlling and Decoder Programming Software Track Power Supply - A DC power supply to provide power to the rails Computer - You supply a laptop or other computer to run JMRI and connect via a USB cable to the Arduino DCC++ EX Software - The DCC++ EX sofware (called a \"sketch\") loaded onto the Arduino There are many flavors and options to choose from. The DCC-EX system is incredibly expandable and adaptable. However, to keep it simple we will be covering a \"Starter System\" and providing you with a Quick Start guide to get you going. There is a more detailed User Manual for those who want to dig deeper and explore other options. The manual covers other motor control boards, other controllers, wireless communication options, current sensing options, using a Raspberry Pi instead of a laptop, and more. You aren't limited to just one or two choices and we've got you covered if you want to put together the perfect system for you.","title":"Home"},{"location":"#welcome-to-dcc-ex","text":"An open-source hardware and software platform for the operation of DCC-equipped model railroads. Welcome to the DCC++ EX website. DCC++ EX is an open-source hardware and software platform for the operation of DCC-equipped model railroads. It is based on Gregg E. Berman's DCC++ code. DCC-EX picks up where the original DCC++ left off. By addressing some previous issues, we have released what we now call \"DCC++ Classic\" - everything you enjoyed in the original version in a stable release. In addition, we have have continued development with an all new version called \"DCC-EX\" that includes enhancements and upgrades. We intend to organize this all in one place so that development can continue and the platform can adjust to new hardware and technnology.","title":"Welcome to DCC++ EX"},{"location":"#our-mission","text":"Our mission is to supply the model railroading community with an Arduino based open source alternative to commercial DCC systems - one that is simple, affordable, expandable, and allows for a great out of box experience to control model trains and accessories. Further, it is our goal that this project be organized, documented, and maintained so that it can continue far into the future.","title":"Our Mission"},{"location":"#what-is-dcc-ex","text":"In addition to controlling your trains, DCC++ also includes advanced features such as dedicated logic for operating turnouts, and the ability to create and control your own digital inputs, digital outputs, and even analog inputs --- great for reading panel switches, sensors, and occupancy detectors, as well as controlling servos, LEDS, and anything else you can imagine! Basically, DCC-EX can control anything using a DCC signal over two tracks, two wires, or via wired Ethernet or WiFi. DCC++ supports the full set of NMRA Digital Command and Control (DCC) standards , including: simultaneous control of multiple locomotives 2-byte and 4-byte locomotive addressing 128-step speed throttling Activate/de-activate all accessory function addresses 0-2048 Control of all cab functions F0-F28 Main Track: Write configuration variable bytes and set/clear specific configuration variable (CV) bits Programming Track: Same as the main track with the addition of reading configuration variable bytes","title":"What is DCC++ EX?"},{"location":"#whats-new-since-dcc-classic","text":"Direct support for all the most popular motor control boards I2C Display support Improved short circuit detection and automatic reset from an overload Current reading, sensing and ACK detection settings in milliAmps instead of just pin readings Improved adherence to the NMRA DCC specification New Communication Manager to handle input and output to multiple sources simultaneously (JMRI, Cab controllers, etc.) Arduino Network Shield and ESP8266 WiFi support Railcom Cutout (Beta) The code is now simpler, modular, faster and provides an API Library for developers and easy expansion No more jumpers or soldering! (Beta)","title":"What's new since DCC++ Classic?"},{"location":"#the-system-consists-of-multiple-parts","text":"Base Station - An Arduino, motorboard and the DCC-EX uploadable firmware Controller - The JMRI Train Controlling and Decoder Programming Software Track Power Supply - A DC power supply to provide power to the rails Computer - You supply a laptop or other computer to run JMRI and connect via a USB cable to the Arduino DCC++ EX Software - The DCC++ EX sofware (called a \"sketch\") loaded onto the Arduino There are many flavors and options to choose from. The DCC-EX system is incredibly expandable and adaptable. However, to keep it simple we will be covering a \"Starter System\" and providing you with a Quick Start guide to get you going. There is a more detailed User Manual for those who want to dig deeper and explore other options. The manual covers other motor control boards, other controllers, wireless communication options, current sensing options, using a Raspberry Pi instead of a laptop, and more. You aren't limited to just one or two choices and we've got you covered if you want to put together the perfect system for you.","title":"The system consists of multiple parts:"},{"location":"api/command-station-api/","text":"Command Station API Work in progress","title":"Command Station"},{"location":"api/command-station-api/#command-station-api","text":"Work in progress","title":"Command Station API"},{"location":"develop/base-station-dev/","text":"Base Station Development Work in progress","title":"Base Station"},{"location":"develop/base-station-dev/#base-station-development","text":"Work in progress","title":"Base Station Development"},{"location":"download/dccex-downloads/","text":"Download DCC++ EX Welcome to the DCC++ EX download page. You have several choices depending on what you want to do with DCC-EX. I you aren't a programmer, or a tinkerer, or you just want to installer to do the work for you, choose the installer download. If you want to download a zip file, extract the files and use the Arduino IDE to install the firmware onto your board, choose one of the options below. If you are a developer and want to install the software into a repository on your computer, select the GitHub Repository option. Automated DCC++ EX / DCC++ Classic Installer Automated Installer Clicking above will open a page containing instructions and the download link for the DCC-EX installer. You will have the opportunity to select either DCC++ \"Classic\" or the new DCC++ EX. The installer will let you select options, such as your Arduino board type, motor shield/motor controller, and COM port and then automatically compile the firmware and upload it to your Arduino or compatible board. Latest DCC++ EX Release Download Zip DCC++ EX Download Zip Clicking above will immediately download a zip file containing the Arduino Sketch file for DCC++ EX. You will need either the Arduino IDE (found here) or the PlatformIO development environment (found here) in order to upload it to your microcontroller board. DCC++ EX GitHub Repository DCC++ EX GitHub Repository Clicking above will take you the the DCC++ EX GitHub repository where you can download the project as a Zip file or Clone it to your own respository. All of the source files and instructions for how to contribute to the project can be found in the repository. We have made sure that you can still use the Arduino IDE if you like, but we recommend devlopers use the PlaformIO development environment. The Original \"Classic\" version The installer at the top of the page will give you the choice of either version. We recommend using the newer DCC++ EX version. But if you are looking for the original source for the project (with some minor bug fixes and improvements), click the links below. NOTE: This version is not actively maintained and will only be updated with bug fixes. Last DCC++ Classic Release Download Zip DCC++ Classic GitHub Repository","title":"DCC++ Basestation"},{"location":"download/dccex-downloads/#download-dcc-ex","text":"Welcome to the DCC++ EX download page. You have several choices depending on what you want to do with DCC-EX. I you aren't a programmer, or a tinkerer, or you just want to installer to do the work for you, choose the installer download. If you want to download a zip file, extract the files and use the Arduino IDE to install the firmware onto your board, choose one of the options below. If you are a developer and want to install the software into a repository on your computer, select the GitHub Repository option.","title":"Download DCC++ EX"},{"location":"download/dccex-downloads/#automated-dcc-ex-dcc-classic-installer","text":"Automated Installer Clicking above will open a page containing instructions and the download link for the DCC-EX installer. You will have the opportunity to select either DCC++ \"Classic\" or the new DCC++ EX. The installer will let you select options, such as your Arduino board type, motor shield/motor controller, and COM port and then automatically compile the firmware and upload it to your Arduino or compatible board.","title":"Automated DCC++ EX / DCC++ Classic Installer"},{"location":"download/dccex-downloads/#latest-dcc-ex-release-download-zip","text":"DCC++ EX Download Zip Clicking above will immediately download a zip file containing the Arduino Sketch file for DCC++ EX. You will need either the Arduino IDE (found here) or the PlatformIO development environment (found here) in order to upload it to your microcontroller board.","title":"Latest DCC++ EX Release Download Zip"},{"location":"download/dccex-downloads/#dcc-ex-github-repository","text":"DCC++ EX GitHub Repository Clicking above will take you the the DCC++ EX GitHub repository where you can download the project as a Zip file or Clone it to your own respository. All of the source files and instructions for how to contribute to the project can be found in the repository. We have made sure that you can still use the Arduino IDE if you like, but we recommend devlopers use the PlaformIO development environment.","title":"DCC++ EX GitHub Repository"},{"location":"download/dccex-downloads/#the-original-classic-version","text":"The installer at the top of the page will give you the choice of either version. We recommend using the newer DCC++ EX version. But if you are looking for the original source for the project (with some minor bug fixes and improvements), click the links below. NOTE: This version is not actively maintained and will only be updated with bug fixes. Last DCC++ Classic Release Download Zip DCC++ Classic GitHub Repository","title":"The Original \"Classic\" version"},{"location":"download/dccex-materials-downloads/","text":"Download DCC++ EX Materials Work in progress","title":"Materials"},{"location":"download/dccex-materials-downloads/#download-dcc-ex-materials","text":"Work in progress","title":"Download DCC++ EX Materials"},{"location":"hardware/i2c-displays/","text":"I2C Displays DCC++ EX is designed to accommodate a display. You don't need a display since the Control Station is often hidden away under the layout. However, if you like the idea of a nice visual display for your panel, just about any I2C (serial to parallel interface) display will work. We recommend either a 20 character by 2 line or 4 line display. The code is easily configurable in order to change the display settings, as well as add or change what is printed on the display.","title":"I2C Displays"},{"location":"hardware/i2c-displays/#i2c-displays","text":"DCC++ EX is designed to accommodate a display. You don't need a display since the Control Station is often hidden away under the layout. However, if you like the idea of a nice visual display for your panel, just about any I2C (serial to parallel interface) display will work. We recommend either a 20 character by 2 line or 4 line display. The code is easily configurable in order to change the display settings, as well as add or change what is printed on the display.","title":"I2C Displays"},{"location":"hardware/microcontrollers/","text":"Microcontrollers DCC++ EX is compatible with many Arduino microcontollers. Out of the box, EX will work by making one selection: Arduino Uno Arduino Mega Arduino Nano We recommend the Mega board since it is inexpensive (you can buy clone boards for under $10 US), it has a lot more GPIO (General Purpose Input/Output) pins so you can expand and connect more sensors, turnouts, leds and accessories, and it has more memory. If you intend to add options like neworking, an I2C Display or anything that adds to the size of the program, you may need the extra memory. And here is an Elegoo version:","title":"Microcontrollers"},{"location":"hardware/microcontrollers/#microcontrollers","text":"DCC++ EX is compatible with many Arduino microcontollers. Out of the box, EX will work by making one selection: Arduino Uno Arduino Mega Arduino Nano We recommend the Mega board since it is inexpensive (you can buy clone boards for under $10 US), it has a lot more GPIO (General Purpose Input/Output) pins so you can expand and connect more sensors, turnouts, leds and accessories, and it has more memory. If you intend to add options like neworking, an I2C Display or anything that adds to the size of the program, you may need the extra memory. And here is an Elegoo version:","title":"Microcontrollers"},{"location":"hardware/motor-boards/","text":"Motor boards There are many motor boards available to use with DCC++ EX. Also called \"Dual-H Bridges\" and \"Motor Shields\", some require a little work, but others are mostly plug and play. NOTE: We recommend the Arduino Motor Shield R3 or a supported clone board like the Deek-Robot ($15 US). Boards currently supported Arduino Motor Shield R3 Deek-Robot Motor Shield LMD18200 Motor Driver Module Pololu MC33926 Motor Shield LMD18200 Based Motor Boards There are other boards, some requiring modification, which are covered in the advanced section. Connecting an Arduino or Deek-Robot Motor Shield Jumper Diagrams","title":"Motor Boards"},{"location":"hardware/motor-boards/#motor-boards","text":"There are many motor boards available to use with DCC++ EX. Also called \"Dual-H Bridges\" and \"Motor Shields\", some require a little work, but others are mostly plug and play. NOTE: We recommend the Arduino Motor Shield R3 or a supported clone board like the Deek-Robot ($15 US).","title":"Motor boards"},{"location":"hardware/motor-boards/#boards-currently-supported","text":"Arduino Motor Shield R3 Deek-Robot Motor Shield LMD18200 Motor Driver Module Pololu MC33926 Motor Shield LMD18200 Based Motor Boards There are other boards, some requiring modification, which are covered in the advanced section.","title":"Boards currently supported"},{"location":"hardware/motor-boards/#connecting-an-arduino-or-deek-robot-motor-shield","text":"Jumper Diagrams","title":"Connecting an Arduino or Deek-Robot Motor Shield"},{"location":"hardware/power-supplies/","text":"Power Supplies The power supply is one of the most important parts of your setup. You need to select a clean, filtered power supply that can supply at least the amount of current required by your motor drivers. Voltage N and Z scale layouts should run at at about 12V to avoid damage to the motors. See this thread to learn more about the pros and cons of running at higher voltages: https://www.trainboard.com/highball/index.php?threads/dcc-voltage-and-n-scale-locomotives.56342/ Most larger scales will run higher voltages. For reference, the Digitrax systems put the rails at around 14V. Do some homework to determine what voltage is best for your system. Amperage You'll need to be able to supply 3A per channel to the tracks on which you intend to run trains, assuming you're using the Arduino motor shield or Pololu motor shield. For larger motor driver shields, you'll want a larger power supply. Recommended Power Supplies Wall warts are a good choice for beginners and those not comfortable with mains wiring. TODO: Add recommended wall warts The Meanwell LRS-100-15 power supply is a good choice for larger scales. It supplies 15V and 105W (that's 7 amps), so it is plenty for running two channels simutaneously. At only $18, it is a cheap option. You'll need to do your own mains wiring, if you don't have experience with this get a friend who does or hire an electrician to do it for you. MAINS POWER IS DANGEROUS. https://www.digikey.com/product-detail/en/mean-well-usa-inc/LRS-100-15/1866-3313-ND/7705005","title":"Power Supplies"},{"location":"hardware/power-supplies/#power-supplies","text":"The power supply is one of the most important parts of your setup. You need to select a clean, filtered power supply that can supply at least the amount of current required by your motor drivers.","title":"Power Supplies"},{"location":"hardware/power-supplies/#voltage","text":"N and Z scale layouts should run at at about 12V to avoid damage to the motors. See this thread to learn more about the pros and cons of running at higher voltages: https://www.trainboard.com/highball/index.php?threads/dcc-voltage-and-n-scale-locomotives.56342/ Most larger scales will run higher voltages. For reference, the Digitrax systems put the rails at around 14V. Do some homework to determine what voltage is best for your system.","title":"Voltage"},{"location":"hardware/power-supplies/#amperage","text":"You'll need to be able to supply 3A per channel to the tracks on which you intend to run trains, assuming you're using the Arduino motor shield or Pololu motor shield. For larger motor driver shields, you'll want a larger power supply.","title":"Amperage"},{"location":"hardware/power-supplies/#recommended-power-supplies","text":"Wall warts are a good choice for beginners and those not comfortable with mains wiring. TODO: Add recommended wall warts The Meanwell LRS-100-15 power supply is a good choice for larger scales. It supplies 15V and 105W (that's 7 amps), so it is plenty for running two channels simutaneously. At only $18, it is a cheap option. You'll need to do your own mains wiring, if you don't have experience with this get a friend who does or hire an electrician to do it for you. MAINS POWER IS DANGEROUS. https://www.digikey.com/product-detail/en/mean-well-usa-inc/LRS-100-15/1866-3313-ND/7705005","title":"Recommended Power Supplies"},{"location":"resources/resources/","text":"Resources Work in progress","title":"Resources"},{"location":"resources/resources/#resources","text":"Work in progress","title":"Resources"},{"location":"start/advanced-setup/","text":"Advanced Setup Work in progress","title":"Advanced Setup"},{"location":"start/advanced-setup/#advanced-setup","text":"Work in progress","title":"Advanced Setup"},{"location":"start/assembly/","text":"Assembly Work in progress Jumper Diagrams Next Page: Power Supplies","title":"Assembly"},{"location":"start/assembly/#assembly","text":"Work in progress Jumper Diagrams Next Page: Power Supplies","title":"Assembly"},{"location":"start/automation/","text":"Automation Work in progress","title":"Automation"},{"location":"start/automation/#automation","text":"Work in progress","title":"Automation"},{"location":"start/basic-setup/","text":"Basic Setup Work in progress","title":"Basic Setup"},{"location":"start/basic-setup/#basic-setup","text":"Work in progress","title":"Basic Setup"},{"location":"start/dccpp-jmri/","text":"DCC++ and JMRI Setup Work in progress","title":"JMRI Setup"},{"location":"start/dccpp-jmri/#dcc-and-jmri-setup","text":"Work in progress","title":"DCC++ and JMRI Setup"},{"location":"start/installer-setup/","text":"Installer Setup Work in progress Jumper Diagrams","title":"Installer Setup"},{"location":"start/installer-setup/#installer-setup","text":"Work in progress Jumper Diagrams","title":"Installer Setup"},{"location":"start/rail-networking/","text":"Rail Networking Setup Work in progress","title":"Rail Networking"},{"location":"start/rail-networking/#rail-networking-setup","text":"Work in progress","title":"Rail Networking Setup"},{"location":"start/starter-kit/","text":"DCC++ EX Starter Kit This guide is designed for do-it-yourselfers to build their own system. Anyone can do it, however if you don't feel technically inclined or just want to save the time, you can purchase a starter kit that contains: Controller: A Raspberry Pi with SD Card already configured with everything you need including the JMRI software. Base Station: An Arduino with DCC++ software already uploaded and a Motor Controller Shield prepped and installed Suppliers list coming soon What You Will Need A \"main\" track or \"operations\" - most people already have this, it's your layout A \"programming\" track or \"service\" track - a short section of track that you will use to program locomotives and other pieces of equipment A known-good locomotive equipped with a DCC decoder Equipment List: Hardware A compatible Arduino Board Arduino UNO R3 (clones work too) Arduino Mega (clones work too) Arduino Nano A compatible motor driver shield Arduino Motor Driver Shield Rev 3 (clones work too) Pololu MC33926 Dual Motor Driver Shield (https://www.pololu.com/product/2503) Other boards listed in the hardware section DC Power Supply (see Power Supplies ) USB A to B Cable (aka USB Printer Cable) Computer to act as a controller to the Arduino Base Station * Software DCC++ EX repository JMRI Arduino IDE to upload DCC++ to the Arduino * You can use a MAC or a Raspberry Pi (Which we recommend) that is covered in another Guide Next Page: Assembly","title":"Starter Kit"},{"location":"start/starter-kit/#dcc-ex-starter-kit","text":"This guide is designed for do-it-yourselfers to build their own system. Anyone can do it, however if you don't feel technically inclined or just want to save the time, you can purchase a starter kit that contains: Controller: A Raspberry Pi with SD Card already configured with everything you need including the JMRI software. Base Station: An Arduino with DCC++ software already uploaded and a Motor Controller Shield prepped and installed Suppliers list coming soon","title":"DCC++ EX Starter Kit"},{"location":"start/starter-kit/#what-you-will-need","text":"A \"main\" track or \"operations\" - most people already have this, it's your layout A \"programming\" track or \"service\" track - a short section of track that you will use to program locomotives and other pieces of equipment A known-good locomotive equipped with a DCC decoder","title":"What You Will Need"},{"location":"start/starter-kit/#equipment-list","text":"","title":"Equipment List:"},{"location":"start/starter-kit/#hardware","text":"A compatible Arduino Board Arduino UNO R3 (clones work too) Arduino Mega (clones work too) Arduino Nano A compatible motor driver shield Arduino Motor Driver Shield Rev 3 (clones work too) Pololu MC33926 Dual Motor Driver Shield (https://www.pololu.com/product/2503) Other boards listed in the hardware section DC Power Supply (see Power Supplies ) USB A to B Cable (aka USB Printer Cable) Computer to act as a controller to the Arduino Base Station *","title":"Hardware"},{"location":"start/starter-kit/#software","text":"DCC++ EX repository JMRI Arduino IDE to upload DCC++ to the Arduino * You can use a MAC or a Raspberry Pi (Which we recommend) that is covered in another Guide Next Page: Assembly","title":"Software"},{"location":"tinker/tinkering/","text":"Tinker With DCC++ EX Work in progress","title":"Tinker with DCC EX"},{"location":"tinker/tinkering/#tinker-with-dcc-ex","text":"Work in progress","title":"Tinker With DCC++ EX"}]}